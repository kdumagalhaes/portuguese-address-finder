{
  "version": 3,
  "sources": ["../../node_modules/input-otp/src/input.tsx", "../../node_modules/input-otp/src/regexp.tsx", "../../node_modules/input-otp/src/sync-timeouts.ts", "../../node_modules/input-otp/src/use-pwm-badge.tsx", "../../node_modules/input-otp/src/use-previous.ts"],
  "sourcesContent": ["'use client'\n\nimport * as React from 'react'\n\nimport { REGEXP_ONLY_DIGITS } from './regexp'\nimport { syncTimeouts } from './sync-timeouts'\nimport { OTPInputProps } from './types'\nimport { usePasswordManagerBadge } from './use-pwm-badge'\nimport { usePrevious } from './use-previous'\n\nexport const OTPInput = React.forwardRef<HTMLInputElement, OTPInputProps>(\n  (\n    {\n      value: uncheckedValue,\n      onChange: uncheckedOnChange,\n      maxLength,\n      textAlign = 'left',\n      pattern = REGEXP_ONLY_DIGITS,\n      inputMode = 'numeric',\n      onComplete,\n      pushPasswordManagerStrategy = 'increase-width',\n      render,\n      containerClassName,\n      noScriptCSSFallback = NOSCRIPT_CSS_FALLBACK,\n      ...props\n    },\n    ref,\n  ) => {\n    // Only used when `value` state is not provided\n    const [internalValue, setInternalValue] = React.useState(\n      typeof props.defaultValue === 'string' ? props.defaultValue : '',\n    )\n\n    // Definitions\n    const value = uncheckedValue ?? internalValue\n    const previousValue = usePrevious(value)\n    const onChange = React.useCallback(\n      (newValue: string) => {\n        uncheckedOnChange?.(newValue)\n        setInternalValue(newValue)\n      },\n      [uncheckedOnChange],\n    )\n    const regexp = React.useMemo(\n      () =>\n        pattern\n          ? typeof pattern === 'string'\n            ? new RegExp(pattern)\n            : pattern\n          : null,\n      [pattern],\n    )\n\n    /** useRef */\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const containerRef = React.useRef<HTMLDivElement>(null)\n    const pwmAreaRef = React.useRef<HTMLDivElement>(null)\n    const initialLoadRef = React.useRef({\n      value,\n      onChange,\n      isIOS:\n        typeof window !== 'undefined' &&\n        window?.CSS?.supports('-webkit-touch-callout', 'none'),\n    })\n    const inputMetadataRef = React.useRef<{\n      prev: [number | null, number | null, 'none' | 'forward' | 'backward']\n    }>({\n      prev: [\n        inputRef.current?.selectionStart,\n        inputRef.current?.selectionEnd,\n        inputRef.current?.selectionDirection,\n      ],\n    })\n    React.useImperativeHandle(ref, () => inputRef.current, [])\n    React.useEffect(() => {\n      const input = inputRef.current\n      const container = containerRef.current\n\n      if (!input || !container) {\n        return\n      }\n\n      // Sync input value\n      if (initialLoadRef.current.value !== input.value) {\n        initialLoadRef.current.onChange(input.value)\n      }\n\n      // Previous selection\n      inputMetadataRef.current.prev = [\n        input.selectionStart,\n        input.selectionEnd,\n        input.selectionDirection,\n      ]\n      function onDocumentSelectionChange() {\n        if (document.activeElement !== input) {\n          setMirrorSelectionStart(null)\n          setMirrorSelectionEnd(null)\n          return\n        }\n\n        // Aliases\n        const _s = input.selectionStart\n        const _e = input.selectionEnd\n        const _dir = input.selectionDirection\n        const _ml = input.maxLength\n        const _val = input.value\n        const _prev = inputMetadataRef.current.prev\n\n        // Algorithm\n        let start = -1\n        let end = -1\n        let direction: 'forward' | 'backward' | 'none' = undefined\n        if (_val.length !== 0 && _s !== null && _e !== null) {\n          const isSingleCaret = _s === _e\n          const isInsertMode = _s === _val.length && _val.length < _ml\n\n          if (isSingleCaret && !isInsertMode) {\n            const c = _s\n            if (c === 0) {\n              start = 0\n              end = 1\n              direction = 'forward'\n            } else if (c === _ml) {\n              start = c - 1\n              end = c\n              direction = 'backward'\n            } else if (_ml > 2 && _val.length > 2) {\n              let offset = 0\n              if (_prev[0] !== null && _prev[1] !== null) {\n                direction = c < _prev[1] ? 'backward' : 'forward'\n                const wasPreviouslyInserting =\n                  _prev[0] === _prev[1] && _prev[0] < _ml\n                if (direction === 'backward' && !wasPreviouslyInserting) {\n                  offset = -1\n                }\n              }\n\n              start = offset + c\n              end = offset + c + 1\n            }\n          }\n\n          if (start !== -1 && end !== -1 && start !== end) {\n            inputRef.current.setSelectionRange(start, end, direction)\n          }\n        }\n\n        // Finally, update the state\n        const s = start !== -1 ? start : _s\n        const e = end !== -1 ? end : _e\n        const dir = direction ?? _dir\n        setMirrorSelectionStart(s)\n        setMirrorSelectionEnd(e)\n        // Store the previous selection value\n        inputMetadataRef.current.prev = [s, e, dir]\n      }\n      document.addEventListener('selectionchange', onDocumentSelectionChange, {\n        capture: true,\n      })\n\n      // Set initial mirror state\n      onDocumentSelectionChange()\n      document.activeElement === input && setIsFocused(true)\n\n      // Apply needed styles\n      if (!document.getElementById('input-otp-style')) {\n        const styleEl = document.createElement('style')\n        styleEl.id = 'input-otp-style'\n        document.head.appendChild(styleEl)\n\n        if (styleEl.sheet) {\n          const autofillStyles =\n            'background: transparent !important; text: transparent !important; border-color: transparent !important; opacity: 0 !important; box-shadow: none !important; -webkit-box-shadow: none !important; -webkit-text-fill-color: transparent !important;'\n\n          safeInsertRule(\n            styleEl.sheet,\n            '[data-input-otp]::selection { background: transparent !important; }',\n          )\n          safeInsertRule(\n            styleEl.sheet,\n            `[data-input-otp]:autofill { ${autofillStyles} }`,\n          )\n          safeInsertRule(\n            styleEl.sheet,\n            `[data-input-otp]:-webkit-autofill { ${autofillStyles} }`,\n          )\n          // iOS\n          safeInsertRule(\n            styleEl.sheet,\n            `@supports (-webkit-touch-callout: none) { [data-input-otp] { letter-spacing: -.6em !important; font-weight: 100 !important; font-stretch: ultra-condensed; font-optical-sizing: none !important; left: -1px !important; right: 1px !important; } }`,\n          )\n          // PWM badges\n          safeInsertRule(\n            styleEl.sheet,\n            `[data-input-otp] + * { pointer-events: all !important; }`,\n          )\n        }\n      }\n      // Track root height\n      const updateRootHeight = () => {\n        if (container) {\n          container.style.setProperty(\n            '--root-height',\n            `${input.clientHeight}px`,\n          )\n        }\n      }\n      updateRootHeight()\n      const resizeObserver = new ResizeObserver(updateRootHeight)\n      resizeObserver.observe(input)\n\n      return () => {\n        document.removeEventListener(\n          'selectionchange',\n          onDocumentSelectionChange,\n          { capture: true },\n        )\n        resizeObserver.disconnect()\n      }\n    }, [])\n\n    /** Mirrors for UI rendering purpose only */\n    const [isHoveringInput, setIsHoveringInput] = React.useState(false)\n    const [isFocused, setIsFocused] = React.useState(false)\n    const [mirrorSelectionStart, setMirrorSelectionStart] = React.useState<\n      number | null\n    >(null)\n    const [mirrorSelectionEnd, setMirrorSelectionEnd] = React.useState<\n      number | null\n    >(null)\n\n    /** Effects */\n    React.useEffect(() => {\n      syncTimeouts(() => {\n        // Forcefully remove :autofill state\n        inputRef.current?.dispatchEvent(new Event('input'))\n\n        // Update the selection state\n        const s = inputRef.current?.selectionStart\n        const e = inputRef.current?.selectionEnd\n        const dir = inputRef.current?.selectionDirection\n        if (s !== null && e !== null) {\n          setMirrorSelectionStart(s)\n          setMirrorSelectionEnd(e)\n          inputMetadataRef.current.prev = [s, e, dir]\n        }\n      })\n    }, [value, isFocused])\n\n    React.useEffect(() => {\n      if (previousValue === undefined) {\n        return\n      }\n\n      if (\n        value !== previousValue &&\n        previousValue.length < maxLength &&\n        value.length === maxLength\n      ) {\n        onComplete?.(value)\n      }\n    }, [maxLength, onComplete, previousValue, value])\n\n    const pwmb = usePasswordManagerBadge({\n      inputRef,\n      pwmAreaRef: pwmAreaRef,\n      pushPasswordManagerStrategy,\n      isFocused,\n    })\n\n    /** Event handlers */\n    const _changeListener = React.useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        const newValue = e.currentTarget.value.slice(0, maxLength)\n        if (newValue.length > 0 && regexp && !regexp.test(newValue)) {\n          e.preventDefault()\n          return\n        }\n        onChange(newValue)\n      },\n      [maxLength, onChange, regexp],\n    )\n    const _focusListener = React.useCallback(() => {\n      if (inputRef.current) {\n        const start = Math.min(inputRef.current.value.length, maxLength - 1)\n        const end = inputRef.current.value.length\n        inputRef.current?.setSelectionRange(start, end)\n        setMirrorSelectionStart(start)\n        setMirrorSelectionEnd(end)\n      }\n      setIsFocused(true)\n    }, [maxLength])\n    // Fix iOS pasting\n    const _pasteListener = React.useCallback(\n      (e: React.ClipboardEvent<HTMLInputElement>) => {\n        const input = inputRef.current\n        if (!initialLoadRef.current.isIOS || !e.clipboardData || !input) {\n          return\n        }\n\n        const content = e.clipboardData.getData('text/plain')\n        e.preventDefault()\n\n        const start = inputRef.current?.selectionStart\n        const end = inputRef.current?.selectionEnd\n\n        const isReplacing = start !== end\n\n        const newValueUncapped = isReplacing\n          ? value.slice(0, start) + content + value.slice(end) // Replacing\n          : value.slice(0, start) + content + value.slice(start) // Inserting\n        const newValue = newValueUncapped.slice(0, maxLength)\n\n        if (newValue.length > 0 && regexp && !regexp.test(newValue)) {\n          return\n        }\n\n        input.value = newValue\n        onChange(newValue)\n\n        const _start = Math.min(newValue.length, maxLength - 1)\n        const _end = newValue.length\n\n        input.setSelectionRange(_start, _end)\n        setMirrorSelectionStart(_start)\n        setMirrorSelectionEnd(_end)\n      },\n      [maxLength, onChange, regexp, value],\n    )\n\n    /** Styles */\n    const rootStyle = React.useMemo<React.CSSProperties>(\n      () => ({\n        position: 'relative',\n        cursor: props.disabled ? 'default' : 'text',\n        userSelect: 'none',\n        WebkitUserSelect: 'none',\n        pointerEvents: 'none',\n        // clipPath: willPushPWMBadge ? 'inset(-2px)' : undefined,\n      }),\n      [props.disabled],\n    )\n\n    const inputStyle = React.useMemo<React.CSSProperties>(\n      () => ({\n        position: 'absolute',\n        inset: 0,\n        width: pwmb.willPushPWMBadge\n          ? `calc(100% + ${pwmb.PWM_BADGE_SPACE_WIDTH})`\n          : '100%',\n        height: '100%',\n        display: 'flex',\n        textAlign,\n        opacity: '1', // Mandatory for iOS hold-paste\n        color: 'transparent',\n        pointerEvents: 'all',\n        background: 'transparent',\n        caretColor: 'transparent',\n        border: '0 solid transparent',\n        outline: '0 solid transparent',\n        boxShadow: 'none',\n        lineHeight: '1',\n        letterSpacing: '-.5em',\n        fontSize: 'var(--root-height)',\n        fontFamily: 'monospace',\n        fontVariantNumeric: 'tabular-nums',\n        // letterSpacing: '-1em',\n        // transform: 'scale(1.5)',\n        // paddingRight: '100%',\n        // paddingBottom: '100%',\n        // debugging purposes\n        // inset: undefined,\n        // position: undefined,\n        // color: 'black',\n        // background: 'white',\n        // opacity: '1',\n        // caretColor: 'black',\n        // padding: '0',\n        // letterSpacing: 'unset',\n      }),\n      [pwmb.PWM_BADGE_SPACE_WIDTH, pwmb.willPushPWMBadge, textAlign],\n    )\n\n    /** Rendering */\n    const renderedInput = React.useMemo(\n      () => (\n        <input\n          autoComplete={props.autoComplete || 'one-time-code'}\n          {...props}\n          data-input-otp\n          data-input-otp-mss={mirrorSelectionStart}\n          data-input-otp-mse={mirrorSelectionEnd}\n          inputMode={inputMode}\n          pattern={regexp?.source}\n          style={inputStyle}\n          maxLength={maxLength}\n          value={value}\n          ref={inputRef}\n          onPaste={e => {\n            _pasteListener(e)\n            props.onPaste?.(e)\n          }}\n          onChange={_changeListener}\n          onMouseOver={e => {\n            setIsHoveringInput(true)\n            props.onMouseOver?.(e)\n          }}\n          onMouseLeave={e => {\n            setIsHoveringInput(false)\n            props.onMouseLeave?.(e)\n          }}\n          onFocus={e => {\n            _focusListener()\n            props.onFocus?.(e)\n          }}\n          onBlur={e => {\n            setIsFocused(false)\n            props.onBlur?.(e)\n          }}\n        />\n      ),\n      [\n        _changeListener,\n        _focusListener,\n        _pasteListener,\n        inputMode,\n        inputStyle,\n        maxLength,\n        mirrorSelectionEnd,\n        mirrorSelectionStart,\n        props,\n        regexp?.source,\n        value,\n      ],\n    )\n\n    const renderedChildren = React.useMemo<ReturnType<typeof render>>(() => {\n      return render({\n        slots: Array.from({ length: maxLength }).map((_, slotIdx) => {\n          const isActive =\n            isFocused &&\n            mirrorSelectionStart !== null &&\n            mirrorSelectionEnd !== null &&\n            ((mirrorSelectionStart === mirrorSelectionEnd &&\n              slotIdx === mirrorSelectionStart) ||\n              (slotIdx >= mirrorSelectionStart && slotIdx < mirrorSelectionEnd))\n\n          const char = value[slotIdx] !== undefined ? value[slotIdx] : null\n\n          return {\n            char,\n            isActive,\n            hasFakeCaret: isActive && char === null,\n          }\n        }),\n        isFocused,\n        isHovering: !props.disabled && isHoveringInput,\n      })\n    }, [\n      isFocused,\n      isHoveringInput,\n      maxLength,\n      mirrorSelectionEnd,\n      mirrorSelectionStart,\n      props.disabled,\n      render,\n      value,\n    ])\n\n    return (\n      <>\n        {noScriptCSSFallback !== null && (\n          <noscript>\n            <style>{noScriptCSSFallback}</style>\n          </noscript>\n        )}\n\n        <div\n          ref={containerRef}\n          data-input-otp-container\n          style={rootStyle}\n          className={containerClassName}\n        >\n          <div\n            ref={pwmAreaRef}\n            style={{\n              position: 'absolute',\n              top: 0,\n              right: `calc(-1 * ${pwmb.PWM_BADGE_SPACE_WIDTH})`,\n              bottom: 0,\n              left: '100%',\n              pointerEvents: 'none',\n              userSelect: 'none',\n              background: 'transparent',\n            }}\n          />\n\n          {renderedChildren}\n\n          <div\n            style={{\n              position: 'absolute',\n              inset: 0,\n              pointerEvents: 'none',\n            }}\n          >\n            {renderedInput}\n          </div>\n        </div>\n      </>\n    )\n  },\n)\nOTPInput.displayName = 'Input'\n\nfunction safeInsertRule(sheet: CSSStyleSheet, rule: string) {\n  try {\n    sheet.insertRule(rule)\n  } catch {\n    console.error('input-otp could not insert CSS rule:', rule)\n  }\n}\n\n// Decided to go with <noscript>\n// instead of `scripting` CSS media query\n// because it's a fallback for initial page load\n// and the <script> tag won't be loaded\n// unless the user has JS disabled.\nconst NOSCRIPT_CSS_FALLBACK = `\n[data-input-otp] {\n  --nojs-bg: white !important;\n  --nojs-fg: black !important;\n\n  background-color: var(--nojs-bg) !important;\n  color: var(--nojs-fg) !important;\n  caret-color: var(--nojs-fg) !important;\n  letter-spacing: .25em !important;\n  text-align: center !important;\n  border: 1px solid var(--nojs-fg) !important;\n  border-radius: 4px !important;\n  width: 100% !important;\n}\n@media (prefers-color-scheme: dark) {\n  [data-input-otp] {\n    --nojs-bg: black !important;\n    --nojs-fg: white !important;\n  }\n}`\n", "export const REGEXP_ONLY_DIGITS = '^\\\\d+$'\nexport const REGEXP_ONLY_CHARS = '^[a-zA-Z]+$'\nexport const REGEXP_ONLY_DIGITS_AND_CHARS = '^[a-zA-Z0-9]+$'\n", "export function syncTimeouts(cb: (...args: any[]) => unknown): number[] {\n  const t1 = setTimeout(cb, 0) // For faster machines\n  const t2 = setTimeout(cb, 1_0)\n  const t3 = setTimeout(cb, 5_0)\n  return [t1, t2, t3]\n}\n", "import * as React from 'react'\nimport { OTPInputProps } from './types'\n\nconst PWM_BADGE_MARGIN_RIGHT = 18\nconst PWM_BADGE_SPACE_WIDTH = '40px'\n\nconst PASSWORD_MANAGERS_SELECTORS = [\n  '[data-lastpass-icon-root]', // LastPass\n  'com-1password-button', // 1Password\n  '[data-dashlanecreated]', // Dashlane\n  '[style$=\"2147483647 !important;\"]', // Bitwarden\n].join(',')\n\nexport function usePasswordManagerBadge({\n  inputRef,\n  pwmAreaRef,\n  pushPasswordManagerStrategy,\n  isFocused,\n}: {\n  inputRef: React.RefObject<HTMLInputElement>\n  pwmAreaRef: React.RefObject<HTMLDivElement>\n  pushPasswordManagerStrategy: OTPInputProps['pushPasswordManagerStrategy']\n  isFocused: boolean\n}) {\n  // Metadata for instant updates (not React state)\n  const pwmMetadata = React.useRef<{\n    done: boolean\n    refocused: boolean\n  }>({\n    done: false,\n    refocused: false,\n  })\n\n  /** Password managers have a badge\n   *  and I'll use this state to push them\n   *  outside the input */\n  const [hasPWMBadge, setHasPWMBadge] = React.useState(false)\n  const [hasPWMBadgeSpace, setHasPWMBadgeSpace] = React.useState(false)\n  const [done, setDone] = React.useState(false)\n\n  const willPushPWMBadge = React.useMemo(() => {\n    if (pushPasswordManagerStrategy === 'none') {\n      return false\n    }\n\n    const noFlickeringCase =\n      pushPasswordManagerStrategy === 'experimental-no-flickering' &&\n      (!done || (done && hasPWMBadgeSpace && hasPWMBadge))\n\n    const increaseWidthCase =\n      pushPasswordManagerStrategy === 'increase-width' &&\n      hasPWMBadge &&\n      hasPWMBadgeSpace\n\n    return increaseWidthCase || noFlickeringCase\n  }, [done, hasPWMBadge, hasPWMBadgeSpace, pushPasswordManagerStrategy])\n\n  const trackPWMBadge = React.useCallback(() => {\n    const input = inputRef.current\n    const pwmArea = pwmAreaRef.current\n    if (!input || !pwmArea || done || pushPasswordManagerStrategy === 'none') {\n      return\n    }\n\n    const elementToCompare =\n      pushPasswordManagerStrategy === 'increase-width' ? input : pwmArea\n\n    // Get the top right-center point of the input.\n    // That is usually where most password managers place their badge.\n    const rightCornerX =\n      elementToCompare.getBoundingClientRect().left +\n      elementToCompare.offsetWidth\n    const centereredY =\n      elementToCompare.getBoundingClientRect().top +\n      elementToCompare.offsetHeight / 2\n    const x = rightCornerX - PWM_BADGE_MARGIN_RIGHT\n    const y = centereredY\n    const maybeBadgeEl = document.elementFromPoint(x, y)\n\n    // Do an extra search to check for famous password managers\n    const pmws = document.querySelectorAll(PASSWORD_MANAGERS_SELECTORS)\n\n    const maybeHasBadge =\n      pmws.length > 0 ||\n      // If the found element is not the input itself,\n      // then we assume it's a password manager badge.\n      // We are not sure. Most times it'll be.\n      maybeBadgeEl !== input\n\n    if (!maybeHasBadge) {\n      return\n    }\n\n    setHasPWMBadge(true)\n    setDone(true)\n\n    // For specific password managers,\n    // the input has to be re-focused\n    // to trigger a re-position of the badge.\n    if (!pwmMetadata.current.refocused && document.activeElement === input) {\n      const sel = [input.selectionStart, input.selectionEnd]\n      input.blur()\n      input.focus()\n      // Recover the previous selection\n      input.setSelectionRange(sel[0], sel[1])\n\n      pwmMetadata.current.refocused = true\n    }\n  }, [done, inputRef, pushPasswordManagerStrategy, pwmAreaRef])\n\n  React.useEffect(() => {\n    // Check if the PWM area is 100% visible\n    const observer = new IntersectionObserver(\n      entries => {\n        const entry = entries[0]\n        setHasPWMBadgeSpace(entry.intersectionRatio > 0.99)\n      },\n      { threshold: 1, root: null, rootMargin: '0px' },\n    )\n\n    pwmAreaRef.current && observer.observe(pwmAreaRef.current)\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [pwmAreaRef])\n\n  React.useEffect(() => {\n    const _isFocused = isFocused || document.activeElement === inputRef.current\n\n    if (pushPasswordManagerStrategy === 'none' || !_isFocused) {\n      return\n    }\n    const t1 = setTimeout(trackPWMBadge, 0)\n    const t2 = setTimeout(trackPWMBadge, 2000)\n    const t3 = setTimeout(trackPWMBadge, 5000)\n    const t4 = setTimeout(() => {\n      setDone(true)\n    }, 6000)\n    return () => {\n      clearTimeout(t1)\n      clearTimeout(t2)\n      clearTimeout(t3)\n      clearTimeout(t4)\n    }\n  }, [inputRef, isFocused, pushPasswordManagerStrategy, trackPWMBadge])\n\n  return { willPushPWMBadge, PWM_BADGE_SPACE_WIDTH }\n}\n", "import * as React from 'react'\n\nexport function usePrevious<T>(value: T) {\n  const ref = React.useRef<T>()\n  React.useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n"],
  "mappings": ";;;;;;AAEA,QAAuB;AGFvB,QAAuB;ACAvB,QAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;AHAhB,IAAMA,KAAqB;AAA3B,IACMC,KAAoB;AAD1B,IAEMC,KAA+B;ACFrC,SAASC,GAAaC,GAA2C;AACtE,MAAMC,IAAK,WAAWD,GAAI,CAAC,GACrBE,IAAK,WAAWF,GAAI,EAAG,GACvBG,IAAK,WAAWH,GAAI,EAAG;AAC7B,SAAO,CAACC,GAAIC,GAAIC,CAAE;AACpB;ACFA,IAAMC,KAAyB;AAA/B,IACMC,KAAwB;AAD9B,IAGMC,KAA8B,CAClC,6BACA,wBACA,0BACA,mCACF,EAAE,KAAK,GAAG;AAEH,SAASC,GAAwB,EACtC,UAAAC,GACA,YAAAC,GACA,6BAAAC,GACA,WAAAC,EACF,GAKG;AAED,MAAMC,IAAoB,SAGvB,EACD,MAAM,OACN,WAAW,MACb,CAAC,GAKK,CAACC,GAAaC,CAAc,IAAU,WAAS,KAAK,GACpD,CAACC,GAAkBC,CAAmB,IAAU,WAAS,KAAK,GAC9D,CAACC,GAAMC,CAAO,IAAU,WAAS,KAAK,GAEtCC,IAAyB,UAAQ,MACjCT,MAAgC,SAC3B,QAQPA,MAAgC,oBAChCG,KACAE,KANAL,MAAgC,iCAC/B,CAACO,KAASA,KAAQF,KAAoBF,IAQxC,CAACI,GAAMJ,GAAaE,GAAkBL,CAA2B,CAAC,GAE/DU,IAAsB,cAAY,MAAM;AAC5C,QAAMC,IAAQb,EAAS,SACjBc,IAAUb,EAAW;AAC3B,QAAI,CAACY,KAAS,CAACC,KAAWL,KAAQP,MAAgC;AAChE;AAGF,QAAMa,IACJb,MAAgC,mBAAmBW,IAAQC,GAIvDE,IACJD,EAAiB,sBAAsB,EAAE,OACzCA,EAAiB,aACbE,IACJF,EAAiB,sBAAsB,EAAE,MACzCA,EAAiB,eAAe,GAC5BG,IAAIF,IAAepB,IACnBuB,IAAIF,GACJG,IAAe,SAAS,iBAAiBF,GAAGC,CAAC;AAYnD,SATa,SAAS,iBAAiBrB,EAA2B,EAG3D,SAAS,KAIdsB,MAAiBP,OAMnBP,EAAe,IAAI,GACnBI,EAAQ,IAAI,GAKR,CAACN,EAAY,QAAQ,aAAa,SAAS,kBAAkBS,IAAO;AACtE,UAAMQ,IAAM,CAACR,EAAM,gBAAgBA,EAAM,YAAY;AACrDA,QAAM,KAAK,GACXA,EAAM,MAAM,GAEZA,EAAM,kBAAkBQ,EAAI,CAAC,GAAGA,EAAI,CAAC,CAAC,GAEtCjB,EAAY,QAAQ,YAAY;IAClC;EACF,GAAG,CAACK,GAAMT,GAAUE,GAA6BD,CAAU,CAAC;AAE5D,SAAM,YAAU,MAAM;AAEpB,QAAMqB,IAAW,IAAI,qBACnBC,OAAW;AACT,UAAMC,IAAQD,EAAQ,CAAC;AACvBf,QAAoBgB,EAAM,oBAAoB,IAAI;IACpD,GACA,EAAE,WAAW,GAAG,MAAM,MAAM,YAAY,MAAM,CAChD;AAEA,WAAAvB,EAAW,WAAWqB,EAAS,QAAQrB,EAAW,OAAO,GAElD,MAAM;AACXqB,QAAS,WAAW;IACtB;EACF,GAAG,CAACrB,CAAU,CAAC,GAET,YAAU,MAAM;AACpB,QAAMwB,IAAatB,KAAa,SAAS,kBAAkBH,EAAS;AAEpE,QAAIE,MAAgC,UAAU,CAACuB;AAC7C;AAEF,QAAMhC,IAAK,WAAWmB,GAAe,CAAC,GAChClB,IAAK,WAAWkB,GAAe,GAAI,GACnCjB,IAAK,WAAWiB,GAAe,GAAI,GACnCc,IAAK,WAAW,MAAM;AAC1BhB,QAAQ,IAAI;IACd,GAAG,GAAI;AACP,WAAO,MAAM;AACX,mBAAajB,CAAE,GACf,aAAaC,CAAE,GACf,aAAaC,CAAE,GACf,aAAa+B,CAAE;IACjB;EACF,GAAG,CAAC1B,GAAUG,GAAWD,GAA6BU,CAAa,CAAC,GAE7D,EAAE,kBAAAD,GAAkB,uBAAAd,GAAsB;AACnD;AClJO,SAAS8B,GAAeC,GAAU;AACvC,MAAMC,IAAY,SAAU;AAC5B,SAAM,YAAU,MAAM;AACpBA,MAAI,UAAUD;EAChB,CAAC,GACMC,EAAI;AACb;AJEO,IAAMC,KAAiB,aAC5B,CACEC,GAcAF,MACG;AAfH,MAAAG,IAAAD,GACE,EAAA,OAAOE,GACP,UAAUC,GACV,WAAAC,GACA,WAAAC,IAAY,QACZ,SAAAC,IAAUjD,IACV,WAAAkD,IAAY,WACZ,YAAAC,GACA,6BAAArC,IAA8B,kBAC9B,QAAAsC,GACA,oBAAAC,GACA,qBAAAC,IAAsBC,GAvB5B,IAYIX,GAYKY,IAAAC,GAZLb,GAYK,CAXH,SACA,YACA,aACA,aACA,WACA,aACA,cACA,+BACA,UACA,sBACA,qBAAA,CAAA;AAvBN,MAAAD,IAAAC,IAAAc,IAAAC;AA6BI,MAAM,CAACC,GAAeC,CAAgB,IAAU,WAC9C,OAAOL,EAAM,gBAAiB,WAAWA,EAAM,eAAe,EAChE,GAGMhB,IAAQK,KAAA,OAAAA,IAAkBe,GAC1BE,IAAgBvB,GAAYC,CAAK,GACjCuB,IAAiB,cACpBC,OAAqB;AACpBlB,SAAA,QAAAA,EAAoBkB,CAAAA,GACpBH,EAAiBG,CAAQ;EAC3B,GACA,CAAClB,CAAiB,CACpB,GACMmB,IAAe,UACnB,MACEhB,IACI,OAAOA,KAAY,WACjB,IAAI,OAAOA,CAAO,IAClBA,IACF,MACN,CAACA,CAAO,CACV,GAGMrC,IAAiB,SAAyB,IAAI,GAC9CsD,IAAqB,SAAuB,IAAI,GAChDrD,IAAmB,SAAuB,IAAI,GAC9CsD,IAAuB,SAAO,EAClC,OAAA3B,GACA,UAAAuB,GACA,OACE,OAAO,UAAW,iBAClBpB,KAAA,UAAA,OAAA,SAAA,OAAQ,QAAR,OAAA,SAAAA,GAAa,SAAS,yBAAyB,MAAA,GACnD,CAAC,GACKyB,IAAyB,SAE5B,EACD,MAAM,EACJxB,KAAAhC,EAAS,YAAT,OAAA,SAAAgC,GAAkB,iBAClBc,KAAA9C,EAAS,YAAT,OAAA,SAAA8C,GAAkB,eAClBC,KAAA/C,EAAS,YAAT,OAAA,SAAA+C,GAAkB,kBACpB,EACF,CAAC;AACK,EAAA,sBAAoBlB,GAAK,MAAM7B,EAAS,SAAS,CAAC,CAAC,GACnD,YAAU,MAAM;AACpB,QAAMa,IAAQb,EAAS,SACjByD,IAAYH,EAAa;AAE/B,QAAI,CAACzC,KAAS,CAAC4C;AACb;AAIEF,MAAe,QAAQ,UAAU1C,EAAM,SACzC0C,EAAe,QAAQ,SAAS1C,EAAM,KAAK,GAI7C2C,EAAiB,QAAQ,OAAO,CAC9B3C,EAAM,gBACNA,EAAM,cACNA,EAAM,kBACR;AACA,aAAS6C,IAA4B;AACnC,UAAI,SAAS,kBAAkB7C,GAAO;AACpC8C,UAAwB,IAAI,GAC5BC,EAAsB,IAAI;AAC1B;MACF;AAGA,UAAMC,IAAKhD,EAAM,gBACXiD,IAAKjD,EAAM,cACXkD,IAAOlD,EAAM,oBACbmD,IAAMnD,EAAM,WACZoD,IAAOpD,EAAM,OACbqD,IAAQV,EAAiB,QAAQ,MAGnCW,IAAQ,IACRC,IAAM,IACNC;AACJ,UAAIJ,EAAK,WAAW,KAAKJ,MAAO,QAAQC,MAAO,MAAM;AACnD,YAAMQ,KAAgBT,MAAOC,GACvBS,KAAeV,MAAOI,EAAK,UAAUA,EAAK,SAASD;AAEzD,YAAIM,MAAiB,CAACC,IAAc;AAClC,cAAMC,IAAIX;AACV,cAAIW,MAAM;AACRL,gBAAQ,GACRC,IAAM,GACNC,IAAY;mBACHG,MAAMR;AACfG,gBAAQK,IAAI,GACZJ,IAAMI,GACNH,IAAY;mBACHL,IAAM,KAAKC,EAAK,SAAS,GAAG;AACrC,gBAAIQ,IAAS;AACb,gBAAIP,EAAM,CAAC,MAAM,QAAQA,EAAM,CAAC,MAAM,MAAM;AAC1CG,kBAAYG,IAAIN,EAAM,CAAC,IAAI,aAAa;AACxC,kBAAMQ,KACJR,EAAM,CAAC,MAAMA,EAAM,CAAC,KAAKA,EAAM,CAAC,IAAIF;AAClCK,oBAAc,cAAc,CAACK,OAC/BD,IAAS;YAEb;AAEAN,gBAAQM,IAASD,GACjBJ,IAAMK,IAASD,IAAI;UACrB;QACF;AAEIL,cAAU,MAAMC,MAAQ,MAAMD,MAAUC,KAC1CpE,EAAS,QAAQ,kBAAkBmE,GAAOC,GAAKC,CAAS;MAE5D;AAGA,UAAMM,KAAIR,MAAU,KAAKA,IAAQN,GAC3Be,KAAIR,MAAQ,KAAKA,IAAMN,GACvBe,KAAMR,KAAA,OAAAA,IAAaN;AACzBJ,QAAwBgB,EAAC,GACzBf,EAAsBgB,EAAC,GAEvBpB,EAAiB,QAAQ,OAAO,CAACmB,IAAGC,IAAGC,EAAG;IAC5C;AAUA,QATA,SAAS,iBAAiB,mBAAmBnB,GAA2B,EACtE,SAAS,KACX,CAAC,GAGDA,EAA0B,GAC1B,SAAS,kBAAkB7C,KAASiE,EAAa,IAAI,GAGjD,CAAC,SAAS,eAAe,iBAAiB,GAAG;AAC/C,UAAMC,IAAU,SAAS,cAAc,OAAO;AAI9C,UAHAA,EAAQ,KAAK,mBACb,SAAS,KAAK,YAAYA,CAAO,GAE7BA,EAAQ,OAAO;AACjB,YAAMC,IACJ;AAEFC,UACEF,EAAQ,OACR,qEACF,GACAE,EACEF,EAAQ,OACR,+BAA+BC,CAAc,IAC/C,GACAC,EACEF,EAAQ,OACR,uCAAuCC,CAAc,IACvD,GAEAC,EACEF,EAAQ,OACR,oPACF,GAEAE,EACEF,EAAQ,OACR,0DACF;MACF;IACF;AAEA,QAAMG,IAAmB,MAAM;AACzBzB,WACFA,EAAU,MAAM,YACd,iBACA,GAAG5C,EAAM,YAAY,IACvB;IAEJ;AACAqE,MAAiB;AACjB,QAAMC,IAAiB,IAAI,eAAeD,CAAgB;AAC1D,WAAAC,EAAe,QAAQtE,CAAK,GAErB,MAAM;AACX,eAAS,oBACP,mBACA6C,GACA,EAAE,SAAS,KAAK,CAClB,GACAyB,EAAe,WAAW;IAC5B;EACF,GAAG,CAAC,CAAC;AAGL,MAAM,CAACC,IAAiBC,EAAkB,IAAU,WAAS,KAAK,GAC5D,CAAClF,GAAW2E,CAAY,IAAU,WAAS,KAAK,GAChD,CAACQ,GAAsB3B,CAAuB,IAAU,WAE5D,IAAI,GACA,CAAC4B,GAAoB3B,CAAqB,IAAU,WAExD,IAAI;AAGA,EAAA,YAAU,MAAM;AACpBrE,OAAa,MAAM;AAzOzB,UAAAwC,GAAAC,GAAAc,GAAAC;AAAAA,OA2OQhB,IAAA/B,EAAS,YAAT,QAAA+B,EAAkB,cAAc,IAAI,MAAM,OAAO,CAAA;AAGjD,UAAM4C,KAAI3C,IAAAhC,EAAS,YAAT,OAAA,SAAAgC,EAAkB,gBACtB4C,KAAI9B,IAAA9C,EAAS,YAAT,OAAA,SAAA8C,EAAkB,cACtB+B,KAAM9B,IAAA/C,EAAS,YAAT,OAAA,SAAA+C,EAAkB;AAC1B4B,YAAM,QAAQC,MAAM,SACtBjB,EAAwBgB,CAAC,GACzBf,EAAsBgB,CAAC,GACvBpB,EAAiB,QAAQ,OAAO,CAACmB,GAAGC,GAAGC,CAAG;IAE9C,CAAC;EACH,GAAG,CAACjD,GAAOzB,CAAS,CAAC,GAEf,YAAU,MAAM;AAChB+C,UAAkB,UAKpBtB,MAAUsB,KACVA,EAAc,SAASf,KACvBP,EAAM,WAAWO,MAEjBI,KAAA,QAAAA,EAAaX,CAAAA;EAEjB,GAAG,CAACO,GAAWI,GAAYW,GAAetB,CAAK,CAAC;AAEhD,MAAM4D,IAAOzF,GAAwB,EACnC,UAAAC,GACA,YAAYC,GACZ,6BAAAC,GACA,WAAAC,EACF,CAAC,GAGKsF,KAAwB,cAC3B,OAA2C;AAC1C,QAAMrC,IAAW,EAAE,cAAc,MAAM,MAAM,GAAGjB,CAAS;AACzD,QAAIiB,EAAS,SAAS,KAAKC,KAAU,CAACA,EAAO,KAAKD,CAAQ,GAAG;AAC3D,QAAE,eAAe;AACjB;IACF;AACAD,MAASC,CAAQ;EACnB,GACA,CAACjB,GAAWgB,GAAUE,CAAM,CAC9B,GACMqC,KAAuB,cAAY,MAAM;AA1RnD,QAAA3D;AA2RM,QAAI/B,EAAS,SAAS;AACpB,UAAMmE,IAAQ,KAAK,IAAInE,EAAS,QAAQ,MAAM,QAAQmC,IAAY,CAAC,GAC7DiC,IAAMpE,EAAS,QAAQ,MAAM;AAAA,OACnC+B,IAAA/B,EAAS,YAAT,QAAA+B,EAAkB,kBAAkBoC,GAAOC,CAAAA,GAC3CT,EAAwBQ,CAAK,GAC7BP,EAAsBQ,CAAG;IAC3B;AACAU,MAAa,IAAI;EACnB,GAAG,CAAC3C,CAAS,CAAC,GAERwD,KAAuB,cAC1B,OAA8C;AAtSrD,QAAA5D,GAAAC;AAuSQ,QAAMnB,IAAQb,EAAS;AACvB,QAAI,CAACuD,EAAe,QAAQ,SAAS,CAAC,EAAE,iBAAiB,CAAC1C;AACxD;AAGF,QAAM+E,IAAU,EAAE,cAAc,QAAQ,YAAY;AACpD,MAAE,eAAe;AAEjB,QAAMzB,KAAQpC,IAAA/B,EAAS,YAAT,OAAA,SAAA+B,EAAkB,gBAC1BqC,KAAMpC,IAAAhC,EAAS,YAAT,OAAA,SAAAgC,EAAkB,cAOxBoB,KALce,MAAUC,IAG1BxC,EAAM,MAAM,GAAGuC,CAAK,IAAIyB,IAAUhE,EAAM,MAAMwC,CAAG,IACjDxC,EAAM,MAAM,GAAGuC,CAAK,IAAIyB,IAAUhE,EAAM,MAAMuC,CAAK,GACrB,MAAM,GAAGhC,CAAS;AAEpD,QAAIiB,EAAS,SAAS,KAAKC,KAAU,CAACA,EAAO,KAAKD,CAAQ;AACxD;AAGFvC,MAAM,QAAQuC,GACdD,EAASC,CAAQ;AAEjB,QAAMyC,IAAS,KAAK,IAAIzC,EAAS,QAAQjB,IAAY,CAAC,GAChD2D,IAAO1C,EAAS;AAEtBvC,MAAM,kBAAkBgF,GAAQC,CAAI,GACpCnC,EAAwBkC,CAAM,GAC9BjC,EAAsBkC,CAAI;EAC5B,GACA,CAAC3D,GAAWgB,GAAUE,GAAQzB,CAAK,CACrC,GAGMmE,KAAkB,UACtB,OAAO,EACL,UAAU,YACV,QAAQnD,EAAM,WAAW,YAAY,QACrC,YAAY,QACZ,kBAAkB,QAClB,eAAe,OAEjB,IACA,CAACA,EAAM,QAAQ,CACjB,GAEMoD,KAAmB,UACvB,OAAO,EACL,UAAU,YACV,OAAO,GACP,OAAOR,EAAK,mBACR,eAAeA,EAAK,qBAAqB,MACzC,QACJ,QAAQ,QACR,SAAS,QACT,WAAApD,GACA,SAAS,KACT,OAAO,eACP,eAAe,OACf,YAAY,eACZ,YAAY,eACZ,QAAQ,uBACR,SAAS,uBACT,WAAW,QACX,YAAY,KACZ,eAAe,SACf,UAAU,sBACV,YAAY,aACZ,oBAAoB,eActB,IACA,CAACoD,EAAK,uBAAuBA,EAAK,kBAAkBpD,CAAS,CAC/D,GAGM6D,KAAsB,UAC1B,MACE,gBAAC,SAAAC,GAAAC,GAAA,EACC,cAAcvD,EAAM,gBAAgB,gBAAA,GAChCA,CAAAA,GAFL,EAGC,kBAAc,MACd,sBAAoB0C,GACpB,sBAAoBC,GACpB,WAAWjD,GACX,SAASe,KAAA,OAAA,SAAAA,EAAQ,QACjB,OAAO2C,IACP,WAAW7D,GACX,OAAOP,GACP,KAAK5B,GACL,SAAS,OAAK;AA9YxB,QAAA+B;AA+YY4D,OAAe,CAAC,IAChB5D,IAAAa,EAAM,YAAN,QAAAb,EAAA,KAAAa,GAAgB,CAAA;EAClB,GACA,UAAU6C,IACV,aAAa,OAAK;AAnZ5B,QAAA1D;AAoZYsD,OAAmB,IAAI,IACvBtD,IAAAa,EAAM,gBAAN,QAAAb,EAAA,KAAAa,GAAoB,CAAA;EACtB,GACA,cAAc,OAAK;AAvZ7B,QAAAb;AAwZYsD,OAAmB,KAAK,IACxBtD,IAAAa,EAAM,iBAAN,QAAAb,EAAA,KAAAa,GAAqB,CAAA;EACvB,GACA,SAAS,OAAK;AA3ZxB,QAAAb;AA4ZY2D,OAAe,IACf3D,IAAAa,EAAM,YAAN,QAAAb,EAAA,KAAAa,GAAgB,CAAA;EAClB,GACA,QAAQ,OAAK;AA/ZvB,QAAAb;AAgaY+C,MAAa,KAAK,IAClB/C,IAAAa,EAAM,WAAN,QAAAb,EAAA,KAAAa,GAAe,CAAA;EACjB,EAAA,CAAA,CACF,GAEF,CACE6C,IACAC,IACAC,IACArD,GACA0D,IACA7D,GACAoD,GACAD,GACA1C,GACAS,KAAA,OAAA,SAAAA,EAAQ,QACRzB,CACF,CACF,GAEMwE,KAAyB,UAAmC,MACzD5D,EAAO,EACZ,OAAO,MAAM,KAAK,EAAE,QAAQL,EAAU,CAAC,EAAE,IAAI,CAACkE,GAAGC,MAAY;AAC3D,QAAMC,IACJpG,KACAmF,MAAyB,QACzBC,MAAuB,SACrBD,MAAyBC,KACzBe,MAAYhB,KACXgB,KAAWhB,KAAwBgB,IAAUf,IAE5CiB,IAAO5E,EAAM0E,CAAO,MAAM,SAAY1E,EAAM0E,CAAO,IAAI;AAE7D,WAAO,EACL,MAAAE,GACA,UAAAD,GACA,cAAcA,KAAYC,MAAS,KACrC;EACF,CAAC,GACD,WAAArG,GACA,YAAY,CAACyC,EAAM,YAAYwC,GACjC,CAAC,GACA,CACDjF,GACAiF,IACAjD,GACAoD,GACAD,GACA1C,EAAM,UACNJ,GACAZ,CACF,CAAC;AAED,SACE,gBAAA,YAAA,MACGc,MAAwB,QACvB,gBAAC,YAAA,MACC,gBAAC,SAAA,MAAOA,CAAoB,CAC9B,GAGF,gBAAC,OAAA,EACC,KAAKY,GACL,4BAAwB,MACxB,OAAOyC,IACP,WAAWtD,EAAAA,GAEX,gBAAC,OAAA,EACC,KAAKxC,GACL,OAAO,EACL,UAAU,YACV,KAAK,GACL,OAAO,aAAauF,EAAK,qBAAqB,KAC9C,QAAQ,GACR,MAAM,QACN,eAAe,QACf,YAAY,QACZ,YAAY,cACd,EAAA,CACF,GAECY,IAED,gBAAC,OAAA,EACC,OAAO,EACL,UAAU,YACV,OAAO,GACP,eAAe,OACjB,EAAA,GAECH,EACH,CACF,CACF;AAEJ,CACF;AACAnE,GAAS,cAAc;AAEvB,SAASmD,EAAewB,GAAsBC,GAAc;AAC1D,MAAI;AACFD,MAAM,WAAWC,CAAI;EACvB,SAAQ9B,GAAA;AACN,YAAQ,MAAM,wCAAwC8B,CAAI;EAC5D;AACF;AAOA,IAAM/D,KAAwB;;;;;;;;;;;;;;;;;;;;",
  "names": ["REGEXP_ONLY_DIGITS", "REGEXP_ONLY_CHARS", "REGEXP_ONLY_DIGITS_AND_CHARS", "syncTimeouts", "cb", "t1", "t2", "t3", "PWM_BADGE_MARGIN_RIGHT", "PWM_BADGE_SPACE_WIDTH", "PASSWORD_MANAGERS_SELECTORS", "usePasswordManagerBadge", "inputRef", "pwmAreaRef", "pushPasswordManagerStrategy", "isFocused", "pwmMetadata", "hasPWMBadge", "setHasPWMBadge", "hasPWMBadgeSpace", "setHasPWMBadgeSpace", "done", "setDone", "willPushPWMBadge", "trackPWMBadge", "input", "pwmArea", "elementToCompare", "rightCornerX", "centereredY", "x", "y", "maybeBadgeEl", "sel", "observer", "entries", "entry", "_isFocused", "t4", "usePrevious", "value", "ref", "OTPInput", "_a", "_b", "uncheckedValue", "uncheckedOnChange", "maxLength", "textAlign", "pattern", "inputMode", "onComplete", "render", "containerClassName", "noScriptCSSFallback", "NOSCRIPT_CSS_FALLBACK", "props", "__objRest", "_c", "_d", "internalValue", "setInternalValue", "previousValue", "onChange", "newValue", "regexp", "containerRef", "initialLoadRef", "inputMetadataRef", "container", "onDocumentSelectionChange", "setMirrorSelectionStart", "setMirrorSelectionEnd", "_s", "_e", "_dir", "_ml", "_val", "_prev", "start", "end", "direction", "isSingleCaret", "isInsertMode", "c", "offset", "wasPreviouslyInserting", "s", "e", "dir", "setIsFocused", "styleEl", "autofillStyles", "safeInsertRule", "updateRootHeight", "resizeObserver", "isHoveringInput", "setIsHoveringInput", "mirrorSelectionStart", "mirrorSelectionEnd", "pwmb", "_changeListener", "_focusListener", "_pasteListener", "content", "_start", "_end", "rootStyle", "inputStyle", "renderedInput", "__spreadProps", "__spreadValues", "renderedChildren", "_", "slotIdx", "isActive", "char", "sheet", "rule"]
}
